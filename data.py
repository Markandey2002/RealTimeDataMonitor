import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Path to the CSV file generated by C++ code
CSV_FILE_PATH = 'obd_dummy_data.csv'

def load_data(file_path):
    if not os.path.exists(file_path): return None # Check if file exists
    try:
        df = pd.read_csv(file_path)
        print(f"Successfully loaded data from '{file_path}'.")
        return df
    except pd.errors.EmptyDataError: print(f"Error: The file '{file_path}' is empty."); return None
    except pd.errors.ParserError as e: print(f"Error parsing CSV file: {e}."); return None
    except Exception as e: print(f"An unexpected error occurred: {e}"); return None

def preprocess_data(df):
    print("\nPreprocessing data...")
    if 'Timestamp_ms' in df.columns:
        df['Timestamp'] = pd.to_datetime(df['Timestamp_ms'], unit='ms') # Convert timestamp to datetime
        df = df.set_index('Timestamp') # Set timestamp as index
        df = df.drop(columns=['Timestamp_ms'])
        print("Timestamp converted and set as index.")
    else: print("Warning: 'Timestamp_ms' column not found.");
    return df

def perform_analysis(df):
    print("\n--- Descriptive Statistics ---")
    print(df.describe()) # Display descriptive statistics

    print("\n--- Data Info ---")
    df.info() # Display DataFrame info

    print("\n--- Missing Values ---")
    print(df.isnull().sum()) # Count missing values

def visualize_data(df):
    print("\nGenerating visualizations...")
    sns.set_style("whitegrid")
    plt.figure(figsize=(16, 12))

    plt.subplot(2, 2, 1)
    if 'Speed_kmh' in df.columns:
        plt.plot(df.index, df['Speed_kmh'], label='Speed (km/h)', color='blue', linewidth=1.5)
        plt.title('Speed Over Time', fontsize=14)
        plt.xlabel('Time', fontsize=12)
        plt.ylabel('Speed (km/h)', fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.7)
    else: plt.text(0.5, 0.5, 'Speed_kmh column not found', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes, fontsize=12, color='red'); plt.title('Speed Over Time (Data Missing)', fontsize=14)
    plt.tight_layout()

    plt.subplot(2, 2, 2)
    if 'RPM' in df.columns:
        plt.plot(df.index, df['RPM'], label='RPM', color='red', linewidth=1.5)
        plt.title('Engine RPM Over Time', fontsize=14)
        plt.xlabel('Time', fontsize=12)
        plt.ylabel('RPM', fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.7)
    else: plt.text(0.5, 0.5, 'RPM column not found', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes, fontsize=12, color='red'); plt.title('Engine RPM Over Time (Data Missing)', fontsize=14)
    plt.tight_layout()

    plt.subplot(2, 2, 3)
    if 'Fuel_Percent' in df.columns and 'Engine_Temp_C' in df.columns:
        plt.plot(df.index, df['Fuel_Percent'], label='Fuel Level (%)', color='green', linewidth=1.5)
        plt.plot(df.index, df['Engine_Temp_C'], label='Engine Temp (Â°C)', color='purple', linestyle='--', linewidth=1.5)
        plt.title('Fuel Level and Engine Temperature Over Time', fontsize=14)
        plt.xlabel('Time', fontsize=12)
        plt.ylabel('Value', fontsize=12)
        plt.legend(fontsize=10)
        plt.grid(True, linestyle='--', alpha=0.7)
    else: plt.text(0.5, 0.5, 'Fuel_Percent or Engine_Temp_C column not found', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes, fontsize=12, color='red'); plt.title('Fuel/Temp Over Time (Data Missing)', fontsize=14)
    plt.tight_layout()

    plt.subplot(2, 2, 4)
    if 'Speed_kmh' in df.columns and 'RPM' in df.columns:
        sns.scatterplot(x='Speed_kmh', y='RPM', data=df, alpha=0.7, color='teal', s=50)
        plt.title('Speed vs. RPM Relationship', fontsize=14)
        plt.xlabel('Speed (km/h)', fontsize=12)
        plt.ylabel('RPM', fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.7)
    else: plt.text(0.5, 0.5, 'Speed_kmh or RPM column not found', horizontalalignment='center', verticalalignment='center', transform=plt.gca().transAxes, fontsize=12, color='red'); plt.title('Speed vs. RPM (Data Missing)', fontsize=14)
    plt.tight_layout()

    plt.suptitle('Automobile Data Analysis and Visualization', y=1.02, fontsize=18, fontweight='bold')
    plt.show()

def main():
    df = load_data(CSV_FILE_PATH)
    if df is None: return
    df = preprocess_data(df)
    perform_analysis(df)
    visualize_data(df)

if __name__ == "__main__":
    main()
